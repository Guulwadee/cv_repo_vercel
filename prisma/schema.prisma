generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO
}

enum Visibility {
  DRAFT
  PRIVATE
  PUBLIC
}

enum TemplateKey {
  CREATIVE
  MODERN
  CLASSIC
  PROFESSIONAL
  MINIMALIST
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role           @default(USER)
  resumes       Resume[]
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  auditLogs     AuditLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Resume {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  slug        String       @unique
  title       Json
  template    TemplateKey  @default(MODERN)
  theme       Json
  locale      String       @default("en")
  sections    Section[]
  visibility  Visibility   @default(DRAFT)
  watermark   Boolean      @default(true)
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Section {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  kind      String
  order     Int
  entries   Entry[]
}

model Entry {
  id        String   @id @default(cuid())
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  title     Json?
  subtitle  Json?
  body      Json?
  meta      Json?
  startDate DateTime?
  endDate   DateTime?
  ongoing   Boolean  @default(false)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              Plan     @default(FREE)
  provider          String?
  providerRef       String?
  status            String   @default("inactive")
  currentPeriodEnd  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Payment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount     Int
  currency   String
  provider   String
  providerId String
  status     String
  metadata   Json?
  createdAt  DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
